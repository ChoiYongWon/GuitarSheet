{"version":3,"sources":["Content/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["EditorWrapper","styled","div","Editor","Cell","EditorTouchArea","EditorNumArea","EditorButtonArea","TouchCell","Circle","props","view","ResultWrapper","Result","svg","attrs","version","xmlns","Line","rect","line","SvgCircle","circle","Text","text","Content","svgRef","createRef","useState","circleState","Array","fill","num","editState","setEditState","useEffect","map","i","index","onClick","e","state","size","min","max","defaultValue","onChange","console","log","value","disabled","icon","DownloadOutlined","saveSvgAsPng","current","ref","x1","y1","x2","y2","stroke","strokeWidth","cx","cy","Math","floor","r","color","x","y","fontSize","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5d4086a0.chunk.js","sourcesContent":["import React,{useState, useEffect, createRef} from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { InputNumber, Button} from 'antd';\r\nimport { DownloadOutlined } from '@ant-design/icons';\r\nimport {saveSvgAsPng} from \"save-svg-as-png\"\r\n\r\nconst EditorWrapper = styled.div`\r\n  width : 40%;\r\n  height : auto;\r\n  padding : 2rem;\r\n  border : 3px solid black;\r\n  border-radius : 10px;\r\n  display : flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n`\r\n\r\nconst Editor = styled.div`\r\n  width : 80%;\r\n  height : auto;\r\n  display : grid;\r\n  position: relative;\r\n  grid-template-columns: repeat(6, 1fr);\r\n  grid-template-rows: repeat(5, 40px);\r\n  background-color: black;\r\n  border : 4px solid black;\r\n  gap : 4px;\r\n  border-left : 14px solid black;\r\n`\r\n\r\nconst Cell = styled.div`\r\n  background-color : white;\r\n`\r\n\r\nconst EditorTouchArea = styled.div`\r\n  width :100%;\r\n  display : grid;\r\n  position : absolute;\r\n  grid-template-columns: repeat(6, 1fr);\r\n  grid-template-rows: repeat(6, 40px);\r\n  gap : 4px;\r\n  top : -23.5px;\r\n`\r\n\r\nconst EditorNumArea = styled.div`\r\n  width : 80%;\r\n  display : flex;\r\n  margin-top : 1.5rem;\r\n  justify-content: space-between;\r\n`\r\n\r\nconst EditorButtonArea = styled.div`\r\n  width : 80%;\r\n  display : flex;\r\n  justify-content: center;\r\n  margin-top : 1rem;\r\n`\r\n\r\nconst TouchCell = styled.div`\r\n  background-color : transparent;\r\n  display : flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  \r\n`\r\n\r\nconst Circle = styled.div`\r\n  ${props=>props.view==true ? `display : block;` : `display : none;`}\r\n  height: 2.5rem;\r\n  width: 2.5rem;\r\n  border-radius: 22.125px;\r\n  background-color : black;\r\n`\r\n//result\r\nconst ResultWrapper = styled.div`\r\n  width : 40%;\r\n  height : auto;\r\n  padding : 2rem;\r\n  border : 3px solid black;\r\n  border-radius : 10px;\r\n  display : flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nconst Result = styled.svg.attrs({ version: '1.1' , xmlns:\"http://www.w3.org/2000/svg\"})`\r\n  width : 82%;\r\n  min-height : 330px;\r\n`\r\n\r\nconst Rect = styled.rect`\r\n\r\n`\r\n\r\nconst Line = styled.line`\r\n  \r\n`\r\n\r\nconst SvgCircle = styled.circle`\r\n\r\n`\r\n\r\nconst Text = styled.text`\r\n\r\n`\r\n\r\nconst Content = () => {\r\n\r\n    const svgRef = createRef()\r\n\r\n    const [editState, setEditState] = useState({\r\n        circleState : new Array(36).fill(false),\r\n        num : 1\r\n    })\r\n\r\n    const onNumChange = (e) => {\r\n        console.log(e)\r\n        setEditState((state)=>{\r\n            return {\r\n                circleState : [...state.circleState],\r\n                num : e\r\n            }\r\n        })\r\n    }\r\n\r\n    const onDownloadClick = (e)=>{\r\n        saveSvgAsPng(svgRef.current, \"GuitarSheet.png\")\r\n    }\r\n\r\n    useEffect(()=>{\r\n\r\n    }, [editState])\r\n\r\n    return (\r\n        <>\r\n            <EditorWrapper>\r\n                <Editor>\r\n                    {\r\n                        new Array(30).fill(0).map((i, index)=>{\r\n                            return <Cell key={index}></Cell>\r\n                        })\r\n                    }\r\n                    <EditorTouchArea>\r\n                        {\r\n                            new Array(36).fill(0).map((i, index)=>{\r\n                                return <TouchCell key={index} onClick={(e)=>{\r\n                                    setEditState((state)=>{\r\n                                        const circleState = [...state.circleState]\r\n                                        circleState[index] = (circleState[index]) ? false : true\r\n                                        return {\r\n                                            ...state,\r\n                                            circleState : circleState\r\n                                        }\r\n                                    })\r\n                                }\r\n                                }><Circle key={index} view={editState.circleState[index]}></Circle></TouchCell>\r\n                            })\r\n                        }\r\n                    </EditorTouchArea>\r\n\r\n                </Editor>\r\n                <EditorNumArea>\r\n                    <InputNumber size=\"large\" min={1} max={17} defaultValue={1} onChange={onNumChange} />\r\n                    <InputNumber size=\"large\" min={1} max={17} value={editState?.num+1} disabled={true}/>\r\n                    <InputNumber size=\"large\" min={1} max={17} value={editState?.num+2} disabled={true}/>\r\n                    <InputNumber size=\"large\" min={1} max={17} value={editState?.num+3} disabled={true}/>\r\n                </EditorNumArea>\r\n                <EditorButtonArea>\r\n                    <Button icon={<DownloadOutlined />} size={\"large\"} onClick={onDownloadClick}>\r\n                        Download\r\n                    </Button>\r\n                </EditorButtonArea>\r\n            </EditorWrapper>\r\n            <ResultWrapper>\r\n                <Result ref={svgRef}>\r\n                    <Line x1={\"0\"} y1={\"10%\"} x2={\"0\"} y2={\"80%\"} stroke={\"black\"} strokeWidth={\"25\"}></Line>\r\n                    <Line x1={\"16.66%\"} y1={\"10%\"} x2={\"16.66%\"} y2={\"80%\"} stroke={\"black\"} strokeWidth={\"3\"}></Line>\r\n                    <Line x1={\"33.32%\"} y1={\"10%\"} x2={\"33.32%\"} y2={\"80%\"} stroke={\"black\"} strokeWidth={\"3\"}></Line>\r\n                    <Line x1={\"49.98%\"} y1={\"10%\"} x2={\"49.98%\"} y2={\"80%\"} stroke={\"black\"} strokeWidth={\"3\"}></Line>\r\n                    <Line x1={\"66.64%\"} y1={\"10%\"} x2={\"66.64%\"} y2={\"80%\"} stroke={\"black\"} strokeWidth={\"3\"}></Line>\r\n                    <Line x1={\"83.3%\"} y1={\"10%\"} x2={\"83.3%\"} y2={\"80%\"} stroke={\"black\"} strokeWidth={\"3\"}></Line>\r\n                    <Line x1={\"100%\"} y1={\"10%\"} x2={\"100%\"} y2={\"80%\"} stroke={\"black\"} strokeWidth={\"6\"}></Line>\r\n                    <Line x1={\"0\"} y1={\"10%\"} x2={\"100%\"} y2={\"10%\"} stroke={\"black\"} strokeWidth={\"3\"}></Line>\r\n                    <Line x1={\"0\"} y1={\"24%\"} x2={\"100%\"} y2={\"24%\"} stroke={\"black\"} strokeWidth={\"3\"}></Line>\r\n                    <Line x1={\"0\"} y1={\"38%\"} x2={\"100%\"} y2={\"38%\"} stroke={\"black\"} strokeWidth={\"3\"}></Line>\r\n                    <Line x1={\"0\"} y1={\"52%\"} x2={\"100%\"} y2={\"52%\"} stroke={\"black\"} strokeWidth={\"3\"}></Line>\r\n                    <Line x1={\"0\"} y1={\"66%\"} x2={\"100%\"} y2={\"66%\"} stroke={\"black\"} strokeWidth={\"3\"}></Line>\r\n                    <Line x1={\"0\"} y1={\"80%\"} x2={\"100%\"} y2={\"80%\"} stroke={\"black\"} strokeWidth={\"3\"}></Line>\r\n                    {\r\n                        editState.circleState.map((i, index)=>{\r\n                            if(i==true){\r\n                                return <SvgCircle key={index} cx={(index%6)*16.6666+8.33+\"%\"} cy={Math.floor((index/6))*14+10+\"%\"} r={\"4%\"} color={\"black\"}></SvgCircle>\r\n                            }return null\r\n                        })\r\n                    }\r\n                    <Text x={\"20%\"} y={\"95%\"} fontSize={\"2rem\"}>{editState.num}</Text>\r\n                    <Text x={\"40%\"} y={\"95%\"} fontSize={\"2rem\"}>{editState.num+1}</Text>\r\n                    <Text x={\"60%\"} y={\"95%\"} fontSize={\"2rem\"}>{editState.num+2}</Text>\r\n                    <Text x={\"80%\"} y={\"95%\"} fontSize={\"2rem\"}>{editState.num+3}</Text>\r\n                </Result>\r\n            </ResultWrapper>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Content","import React from \"react\"\nimport Content from \"./Content/\"\n\nfunction App() {\n  return (\n    <>\n      <Content></Content>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}